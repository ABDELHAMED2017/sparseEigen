text(x = 400, y = 0.05, labels = round(patternRec_spcagrid[1, 3], 4))
lines(V[, 1]*sign(V[1, 1]), col = "red")
lines(V[, 2]*sign(V[sp_card+1, 2]), col = "red")
lines(V[, 3]*sign(V[2*sp_card+1, 3]), col = "red")
matplot(seq(1, m), results_spcagrid[2, ,] , xlab = "", ylab = "", ylim = c(-0.1, 0.25), lty = 'solid',
main = paste0('SPcaGrid: lambda = ', lam[2]), type = "h",
col = c('black', 'black', 'black'))
grid()
text(x = 190, y = 0.22, labels = 'Recovery:')
text(x = 300, y = 0.22, labels = 'Angle')
text(x = 300, y = 0.15, labels = round(angleRec_spcagrid[2, 1], 4))
text(x = 300, y = 0.10, labels = round(angleRec_spcagrid[2, 2], 4))
text(x = 300, y = 0.05, labels = round(angleRec_spcagrid[2, 3], 4))
text(x = 400, y = 0.22, labels = 'Pattern')
text(x = 400, y = 0.15, labels = round(patternRec_spcagrid[2, 1], 4))
text(x = 400, y = 0.10, labels = round(patternRec_spcagrid[2, 2], 4))
text(x = 400, y = 0.05, labels = round(patternRec_spcagrid[2, 3], 4))
lines(V[, 1]*sign(V[1, 1]), col = "red")
lines(V[, 2]*sign(V[sp_card+1, 2]), col = "red")
lines(V[, 3]*sign(V[2*sp_card+1, 3]), col = "red")
matplot(seq(1, m), results_spcagrid[3, ,] , xlab = "Index", ylab = "", ylim = c(-0.1, 0.25), lty = 'solid',
main = paste0('SPcaGrid: lambda = ', lam[3]), type = "h",
col = c('black', 'black', 'black'))
grid()
text(x = 190, y = 0.22, labels = 'Recovery:')
text(x = 300, y = 0.22, labels = 'Angle')
text(x = 300, y = 0.15, labels = round(angleRec_spcagrid[3, 1], 4))
text(x = 300, y = 0.10, labels = round(angleRec_spcagrid[3, 2], 4))
text(x = 300, y = 0.05, labels = round(angleRec_spcagrid[3, 3], 4))
text(x = 400, y = 0.22, labels = 'Pattern')
text(x = 400, y = 0.15, labels = round(patternRec_spcagrid[3, 1], 4))
text(x = 400, y = 0.10, labels = round(patternRec_spcagrid[3, 2], 4))
text(x = 400, y = 0.05, labels = round(patternRec_spcagrid[3, 3], 4))
lines(V[, 1]*sign(V[1, 1]), col = "red")
lines(V[, 2]*sign(V[sp_card+1, 2]), col = "red")
lines(V[, 3]*sign(V[2*sp_card+1, 3]), col = "red")
dev.off()
# NO TRANSPARENCY
setEPS()
postscript("recovery.eps", width = 20*0.393701, height = 14*0.393701)
par(mfcol = c(3, 3), mai = c(0.6, 0.3, 0.3, 0.3))
matplot(seq(1, m), results_spEigen[1, ,] , xlab = "", ylab = "", ylim = c(-0.1, 0.25), lty = 'solid',
main = paste('spEigen: rho =', rho[1]), type = "h",
col = c('orangered', 'blue', 'green'))
grid()
text(x = 190, y = 0.22, labels = 'Recovery:')
text(x = 300, y = 0.22, labels = 'Angle')
text(x = 300, y = 0.15, labels = round(angleRec_spEigen[1, 1], 4))
text(x = 300, y = 0.10, labels = round(angleRec_spEigen[1, 2], 4))
text(x = 300, y = 0.05, labels = round(angleRec_spEigen[1, 3], 4))
text(x = 400, y = 0.22, labels = 'Pattern')
text(x = 400, y = 0.15, labels = round(patternRec_spEigen[1, 1], 4))
text(x = 400, y = 0.10, labels = round(patternRec_spEigen[1, 2], 4))
text(x = 400, y = 0.05, labels = round(patternRec_spEigen[1, 3], 4))
lines(V[, 1]*sign(V[1, 1]), col = "red")
lines(V[, 2]*sign(V[sp_card+1, 2]), col = "red")
lines(V[, 3]*sign(V[2*sp_card+1, 3]), col = "red")
matplot(seq(1, m), results_spEigen[2, ,] , xlab = "", ylab = "", ylim = c(-0.1, 0.25), lty = 'solid',
main = paste('spEigen: rho =', rho[2]), type = "h",
col = c('orangered', 'blue', 'green'))
grid()
text(x = 190, y = 0.22, labels = 'Recovery:')
text(x = 300, y = 0.22, labels = 'Angle')
text(x = 300, y = 0.15, labels = round(angleRec_spEigen[2, 1], 4))
text(x = 300, y = 0.10, labels = round(angleRec_spEigen[2, 2], 4))
text(x = 300, y = 0.05, labels = round(angleRec_spEigen[2, 3], 4))
text(x = 400, y = 0.22, labels = 'Pattern')
text(x = 400, y = 0.15, labels = round(patternRec_spEigen[2, 1], 4))
text(x = 400, y = 0.10, labels = round(patternRec_spEigen[2, 2], 4))
text(x = 400, y = 0.05, labels = round(patternRec_spEigen[2, 3], 4))
lines(V[, 1]*sign(V[1, 1]), col = "red")
lines(V[, 2]*sign(V[sp_card+1, 2]), col = "red")
lines(V[, 3]*sign(V[2*sp_card+1, 3]), col = "red")
matplot(seq(1, m), results_spEigen[3, ,] , xlab = "Index", ylab = "", ylim = c(-0.1, 0.25), lty = 'solid',
main = paste('spEigen: rho =', rho[3]), type = "h",
col = c('orangered', 'blue', 'green'))
grid()
text(x = 190, y = 0.22, labels = 'Recovery:')
text(x = 300, y = 0.22, labels = 'Angle')
text(x = 300, y = 0.15, labels = round(angleRec_spEigen[3, 1], 4))
text(x = 300, y = 0.10, labels = round(angleRec_spEigen[3, 2], 4))
text(x = 300, y = 0.05, labels = round(angleRec_spEigen[3, 3], 4))
text(x = 400, y = 0.22, labels = 'Pattern')
text(x = 400, y = 0.15, labels = round(patternRec_spEigen[3, 1], 4))
text(x = 400, y = 0.10, labels = round(patternRec_spEigen[3, 2], 4))
text(x = 400, y = 0.05, labels = round(patternRec_spEigen[3, 3], 4))
lines(V[, 1]*sign(V[1, 1]), col = "red")
lines(V[, 2]*sign(V[sp_card+1, 2]), col = "red")
lines(V[, 3]*sign(V[2*sp_card+1, 3]), col = "red")
dev.off()
matplot(seq(1, m), results_spEigen[1, ,] , xlab = "", ylab = "", ylim = c(-0.1, 0.25), lty = 'solid',
main = paste('spEigen: rho =', rho[1]), type = "h",
col = c('orangered', 'blue', 'green'))
grid()
text(x = 190, y = 0.22, labels = 'Recovery:')
text(x = 300, y = 0.22, labels = 'Angle')
text(x = 300, y = 0.15, labels = round(angleRec_spEigen[1, 1], 4))
text(x = 300, y = 0.10, labels = round(angleRec_spEigen[1, 2], 4))
text(x = 300, y = 0.05, labels = round(angleRec_spEigen[1, 3], 4))
text(x = 400, y = 0.22, labels = 'Pattern')
text(x = 400, y = 0.15, labels = round(patternRec_spEigen[1, 1], 4))
text(x = 400, y = 0.10, labels = round(patternRec_spEigen[1, 2], 4))
text(x = 400, y = 0.05, labels = round(patternRec_spEigen[1, 3], 4))
lines(V[, 1]*sign(V[1, 1]), col = "red")
lines(V[, 2]*sign(V[sp_card+1, 2]), col = "red")
lines(V[, 3]*sign(V[2*sp_card+1, 3]), col = "red")
par(mfcol=c(1,1))
matplot(seq(1, m), results_spEigen[1, ,] , xlab = "", ylab = "", ylim = c(-0.1, 0.25), lty = 'solid',
main = paste('spEigen: rho =', rho[1]), type = "h",
col = c('orangered', 'blue', 'green'))
grid()
text(x = 190, y = 0.22, labels = 'Recovery:')
text(x = 300, y = 0.22, labels = 'Angle')
text(x = 300, y = 0.15, labels = round(angleRec_spEigen[1, 1], 4))
text(x = 300, y = 0.10, labels = round(angleRec_spEigen[1, 2], 4))
text(x = 300, y = 0.05, labels = round(angleRec_spEigen[1, 3], 4))
text(x = 400, y = 0.22, labels = 'Pattern')
text(x = 400, y = 0.15, labels = round(patternRec_spEigen[1, 1], 4))
text(x = 400, y = 0.10, labels = round(patternRec_spEigen[1, 2], 4))
text(x = 400, y = 0.05, labels = round(patternRec_spEigen[1, 3], 4))
lines(V[, 1]*sign(V[1, 1]), col = "red")
lines(V[, 2]*sign(V[sp_card+1, 2]), col = "red")
lines(V[, 3]*sign(V[2*sp_card+1, 3]), col = "red")
source('C:/Users/kbenidis/Dropbox/Documents/HKUST/R Packages/sparseEigen/R_buildignore/package_comp_param.R')
# Plots
# png(file="recovery.png", width = 20, height = 14, units = "cm", res = 900)
# postscript("recovery.eps", width = 20*0.393701, height = 14*0.393701)
# alpha <- function(colour, alpha) {return(colour)}  # to remove the transparency that kills the eps
cairo_ps(filename = "recovery.ps", width = 20*0.393701, height = 14*0.393701, fallback_resolution = 300)  #this allows transparency but the size if huge
# Cairo(file = 'recovery.ps', type = 'ps', units = 'cm', width = 20, height = 14, dpi = 300)
par(mfcol = c(3, 3), mai = c(0.6, 0.3, 0.3, 0.3))
matplot(seq(1, m), results_spEigen[1, ,] , xlab = "", ylab = "", ylim = c(-0.1, 0.25), lty = 'solid',
main = paste('spEigen: rho =', rho[1]), type = "h",
col = alpha(c('orangered', 'blue', 'green'), 0.5))
grid()
text(x = 190, y = 0.22, labels = 'Recovery:')
text(x = 300, y = 0.22, labels = 'Angle')
text(x = 300, y = 0.15, labels = round(angleRec_spEigen[1, 1], 4))
text(x = 300, y = 0.10, labels = round(angleRec_spEigen[1, 2], 4))
text(x = 300, y = 0.05, labels = round(angleRec_spEigen[1, 3], 4))
text(x = 400, y = 0.22, labels = 'Pattern')
text(x = 400, y = 0.15, labels = round(patternRec_spEigen[1, 1], 4))
text(x = 400, y = 0.10, labels = round(patternRec_spEigen[1, 2], 4))
text(x = 400, y = 0.05, labels = round(patternRec_spEigen[1, 3], 4))
lines(V[, 1]*sign(V[1, 1]), col = "red")
lines(V[, 2]*sign(V[sp_card+1, 2]), col = "red")
lines(V[, 3]*sign(V[2*sp_card+1, 3]), col = "red")
matplot(seq(1, m), results_spEigen[2, ,] , xlab = "", ylab = "", ylim = c(-0.1, 0.25), lty = 'solid',
main = paste('spEigen: rho =', rho[2]), type = "h",
col = alpha(c('orangered', 'blue', 'green'), 0.5))
grid()
text(x = 190, y = 0.22, labels = 'Recovery:')
text(x = 300, y = 0.22, labels = 'Angle')
text(x = 300, y = 0.15, labels = round(angleRec_spEigen[2, 1], 4))
text(x = 300, y = 0.10, labels = round(angleRec_spEigen[2, 2], 4))
text(x = 300, y = 0.05, labels = round(angleRec_spEigen[2, 3], 4))
text(x = 400, y = 0.22, labels = 'Pattern')
text(x = 400, y = 0.15, labels = round(patternRec_spEigen[2, 1], 4))
text(x = 400, y = 0.10, labels = round(patternRec_spEigen[2, 2], 4))
text(x = 400, y = 0.05, labels = round(patternRec_spEigen[2, 3], 4))
lines(V[, 1]*sign(V[1, 1]), col = "red")
lines(V[, 2]*sign(V[sp_card+1, 2]), col = "red")
lines(V[, 3]*sign(V[2*sp_card+1, 3]), col = "red")
matplot(seq(1, m), results_spEigen[3, ,] , xlab = "Index", ylab = "", ylim = c(-0.1, 0.25), lty = 'solid',
main = paste('spEigen: rho =', rho[3]), type = "h",
col = alpha(c('orangered', 'blue', 'green'), 0.5))
grid()
text(x = 190, y = 0.22, labels = 'Recovery:')
text(x = 300, y = 0.22, labels = 'Angle')
text(x = 300, y = 0.15, labels = round(angleRec_spEigen[3, 1], 4))
text(x = 300, y = 0.10, labels = round(angleRec_spEigen[3, 2], 4))
text(x = 300, y = 0.05, labels = round(angleRec_spEigen[3, 3], 4))
text(x = 400, y = 0.22, labels = 'Pattern')
text(x = 400, y = 0.15, labels = round(patternRec_spEigen[3, 1], 4))
text(x = 400, y = 0.10, labels = round(patternRec_spEigen[3, 2], 4))
text(x = 400, y = 0.05, labels = round(patternRec_spEigen[3, 3], 4))
lines(V[, 1]*sign(V[1, 1]), col = "red")
lines(V[, 2]*sign(V[sp_card+1, 2]), col = "red")
lines(V[, 3]*sign(V[2*sp_card+1, 3]), col = "red")
matplot(seq(1, m), results_spca[1, ,] , xlab = "", ylab = "", ylim = c(-0.1, 0.25), lty = 'solid',
main = paste0('spca: para = [', rho_spca[1],', ', rho_spca[1],', ', rho_spca[1],']'), type = "h",
col = alpha(c('orangered', 'blue', 'green'), 0.5))
grid()
text(x = 190, y = 0.22, labels = 'Recovery:')
text(x = 300, y = 0.22, labels = 'Angle')
text(x = 300, y = 0.15, labels = round(angleRec_spca[1, 1], 4))
text(x = 300, y = 0.10, labels = round(angleRec_spca[1, 2], 4))
text(x = 300, y = 0.05, labels = round(angleRec_spca[1, 3], 4))
text(x = 400, y = 0.22, labels = 'Pattern')
text(x = 400, y = 0.15, labels = round(patternRec_spca[1, 1], 4))
text(x = 400, y = 0.10, labels = round(patternRec_spca[1, 2], 4))
text(x = 400, y = 0.05, labels = round(patternRec_spca[1, 3], 4))
lines(V[, 1]*sign(V[1, 1]), col = "red")
lines(V[, 2]*sign(V[sp_card+1, 2]), col = "red")
lines(V[, 3]*sign(V[2*sp_card+1, 3]), col = "red")
matplot(seq(1, m), results_spca[2, ,] , xlab = "", ylab = "", ylim = c(-0.1, 0.25), lty = 'solid',
main = paste0('spca: para = [', rho_spca[2],', ', rho_spca[2],', ', rho_spca[2],']'), type = "h",
col = alpha(c('orangered', 'blue', 'green'), 0.5))
grid()
text(x = 190, y = 0.22, labels = 'Recovery:')
text(x = 300, y = 0.22, labels = 'Angle')
text(x = 300, y = 0.15, labels = round(angleRec_spca[2, 1], 4))
text(x = 300, y = 0.10, labels = round(angleRec_spca[2, 2], 4))
text(x = 300, y = 0.05, labels = round(angleRec_spca[2, 3], 4))
text(x = 400, y = 0.22, labels = 'Pattern')
text(x = 400, y = 0.15, labels = round(patternRec_spca[2, 1], 4))
text(x = 400, y = 0.10, labels = round(patternRec_spca[2, 2], 4))
text(x = 400, y = 0.05, labels = round(patternRec_spca[2, 3], 4))
lines(V[, 1]*sign(V[1, 1]), col = "red")
lines(V[, 2]*sign(V[sp_card+1, 2]), col = "red")
lines(V[, 3]*sign(V[2*sp_card+1, 3]), col = "red")
matplot(seq(1, m), results_spca[3, ,] , xlab = "Index", ylab = "", ylim = c(-0.1, 0.25), lty = 'solid',
main = paste0('spca: para = [', rho_spca[3],', ', rho_spca[3],', ', rho_spca[3],']'), type = "h",
col = alpha(c('orangered', 'blue', 'green'), 0.5))
grid()
text(x = 190, y = 0.22, labels = 'Recovery:')
text(x = 300, y = 0.22, labels = 'Angle')
text(x = 300, y = 0.15, labels = round(angleRec_spca[3, 1], 4))
text(x = 300, y = 0.10, labels = round(angleRec_spca[3, 2], 4))
text(x = 300, y = 0.05, labels = round(angleRec_spca[3, 3], 4))
text(x = 400, y = 0.22, labels = 'Pattern')
text(x = 400, y = 0.15, labels = round(patternRec_spca[3, 1], 4))
text(x = 400, y = 0.10, labels = round(patternRec_spca[3, 2], 4))
text(x = 400, y = 0.05, labels = round(patternRec_spca[3, 3], 4))
lines(V[, 1]*sign(V[1, 1]), col = "red")
lines(V[, 2]*sign(V[sp_card+1, 2]), col = "red")
lines(V[, 3]*sign(V[2*sp_card+1, 3]), col = "red")
matplot(seq(1, m), results_spca[1, ,] , xlab = "", ylab = "", ylim = c(-0.1, 0.25), lty = 'solid',
main = paste0('SPcaGrid: lambda = ', lam[1]), type = "h",
col = alpha(c('orangered', 'blue', 'green'), 0.5))
grid()
text(x = 190, y = 0.22, labels = 'Recovery:')
text(x = 300, y = 0.22, labels = 'Angle')
text(x = 300, y = 0.15, labels = round(angleRec_spcagrid[1, 1], 4))
text(x = 300, y = 0.10, labels = round(angleRec_spcagrid[1, 2], 4))
text(x = 300, y = 0.05, labels = round(angleRec_spcagrid[1, 3], 4))
text(x = 400, y = 0.22, labels = 'Pattern')
text(x = 400, y = 0.15, labels = round(patternRec_spcagrid[1, 1], 4))
text(x = 400, y = 0.10, labels = round(patternRec_spcagrid[1, 2], 4))
text(x = 400, y = 0.05, labels = round(patternRec_spcagrid[1, 3], 4))
lines(V[, 1]*sign(V[1, 1]), col = "red")
lines(V[, 2]*sign(V[sp_card+1, 2]), col = "red")
lines(V[, 3]*sign(V[2*sp_card+1, 3]), col = "red")
matplot(seq(1, m), results_spcagrid[2, ,] , xlab = "", ylab = "", ylim = c(-0.1, 0.25), lty = 'solid',
main = paste0('SPcaGrid: lambda = ', lam[2]), type = "h",
col = alpha(c('orangered', 'blue', 'green'), 0.5))
grid()
text(x = 190, y = 0.22, labels = 'Recovery:')
text(x = 300, y = 0.22, labels = 'Angle')
text(x = 300, y = 0.15, labels = round(angleRec_spcagrid[2, 1], 4))
text(x = 300, y = 0.10, labels = round(angleRec_spcagrid[2, 2], 4))
text(x = 300, y = 0.05, labels = round(angleRec_spcagrid[2, 3], 4))
text(x = 400, y = 0.22, labels = 'Pattern')
text(x = 400, y = 0.15, labels = round(patternRec_spcagrid[2, 1], 4))
text(x = 400, y = 0.10, labels = round(patternRec_spcagrid[2, 2], 4))
text(x = 400, y = 0.05, labels = round(patternRec_spcagrid[2, 3], 4))
lines(V[, 1]*sign(V[1, 1]), col = "red")
lines(V[, 2]*sign(V[sp_card+1, 2]), col = "red")
lines(V[, 3]*sign(V[2*sp_card+1, 3]), col = "red")
matplot(seq(1, m), results_spcagrid[3, ,] , xlab = "Index", ylab = "", ylim = c(-0.1, 0.25), lty = 'solid',
main = paste0('SPcaGrid: lambda = ', lam[3]), type = "h",
col = alpha(c('orangered', 'blue', 'green'), 0.5))
grid()
text(x = 190, y = 0.22, labels = 'Recovery:')
text(x = 300, y = 0.22, labels = 'Angle')
text(x = 300, y = 0.15, labels = round(angleRec_spcagrid[3, 1], 4))
text(x = 300, y = 0.10, labels = round(angleRec_spcagrid[3, 2], 4))
text(x = 300, y = 0.05, labels = round(angleRec_spcagrid[3, 3], 4))
text(x = 400, y = 0.22, labels = 'Pattern')
text(x = 400, y = 0.15, labels = round(patternRec_spcagrid[3, 1], 4))
text(x = 400, y = 0.10, labels = round(patternRec_spcagrid[3, 2], 4))
text(x = 400, y = 0.05, labels = round(patternRec_spcagrid[3, 3], 4))
lines(V[, 1]*sign(V[1, 1]), col = "red")
lines(V[, 2]*sign(V[sp_card+1, 2]), col = "red")
lines(V[, 3]*sign(V[2*sp_card+1, 3]), col = "red")
dev.off()
source('C:/Users/kbenidis/Dropbox/Documents/HKUST/R Packages/sparseEigen/R_buildignore/package_comp_param.R')
pdf('recovery.pdf', width = 20*0.393701, height = 14*0.393701)
par(mfcol = c(3, 3), mai = c(0.6, 0.3, 0.3, 0.3))
matplot(seq(1, m), results_spEigen[1, ,] , xlab = "", ylab = "", ylim = c(-0.1, 0.25), lty = 'solid',
main = paste('spEigen: rho =', rho[1]), type = "h",
col = alpha(c('orangered', 'blue', 'green'), 0.5))
grid()
text(x = 190, y = 0.22, labels = 'Recovery:')
text(x = 300, y = 0.22, labels = 'Angle')
text(x = 300, y = 0.15, labels = round(angleRec_spEigen[1, 1], 4))
text(x = 300, y = 0.10, labels = round(angleRec_spEigen[1, 2], 4))
text(x = 300, y = 0.05, labels = round(angleRec_spEigen[1, 3], 4))
text(x = 400, y = 0.22, labels = 'Pattern')
text(x = 400, y = 0.15, labels = round(patternRec_spEigen[1, 1], 4))
text(x = 400, y = 0.10, labels = round(patternRec_spEigen[1, 2], 4))
text(x = 400, y = 0.05, labels = round(patternRec_spEigen[1, 3], 4))
lines(V[, 1]*sign(V[1, 1]), col = "red")
lines(V[, 2]*sign(V[sp_card+1, 2]), col = "red")
lines(V[, 3]*sign(V[2*sp_card+1, 3]), col = "red")
matplot(seq(1, m), results_spEigen[2, ,] , xlab = "", ylab = "", ylim = c(-0.1, 0.25), lty = 'solid',
main = paste('spEigen: rho =', rho[2]), type = "h",
col = alpha(c('orangered', 'blue', 'green'), 0.5))
grid()
text(x = 190, y = 0.22, labels = 'Recovery:')
text(x = 300, y = 0.22, labels = 'Angle')
text(x = 300, y = 0.15, labels = round(angleRec_spEigen[2, 1], 4))
text(x = 300, y = 0.10, labels = round(angleRec_spEigen[2, 2], 4))
text(x = 300, y = 0.05, labels = round(angleRec_spEigen[2, 3], 4))
text(x = 400, y = 0.22, labels = 'Pattern')
text(x = 400, y = 0.15, labels = round(patternRec_spEigen[2, 1], 4))
text(x = 400, y = 0.10, labels = round(patternRec_spEigen[2, 2], 4))
text(x = 400, y = 0.05, labels = round(patternRec_spEigen[2, 3], 4))
lines(V[, 1]*sign(V[1, 1]), col = "red")
lines(V[, 2]*sign(V[sp_card+1, 2]), col = "red")
lines(V[, 3]*sign(V[2*sp_card+1, 3]), col = "red")
matplot(seq(1, m), results_spEigen[3, ,] , xlab = "Index", ylab = "", ylim = c(-0.1, 0.25), lty = 'solid',
main = paste('spEigen: rho =', rho[3]), type = "h",
col = alpha(c('orangered', 'blue', 'green'), 0.5))
grid()
text(x = 190, y = 0.22, labels = 'Recovery:')
text(x = 300, y = 0.22, labels = 'Angle')
text(x = 300, y = 0.15, labels = round(angleRec_spEigen[3, 1], 4))
text(x = 300, y = 0.10, labels = round(angleRec_spEigen[3, 2], 4))
text(x = 300, y = 0.05, labels = round(angleRec_spEigen[3, 3], 4))
text(x = 400, y = 0.22, labels = 'Pattern')
text(x = 400, y = 0.15, labels = round(patternRec_spEigen[3, 1], 4))
text(x = 400, y = 0.10, labels = round(patternRec_spEigen[3, 2], 4))
text(x = 400, y = 0.05, labels = round(patternRec_spEigen[3, 3], 4))
lines(V[, 1]*sign(V[1, 1]), col = "red")
lines(V[, 2]*sign(V[sp_card+1, 2]), col = "red")
lines(V[, 3]*sign(V[2*sp_card+1, 3]), col = "red")
matplot(seq(1, m), results_spca[1, ,] , xlab = "", ylab = "", ylim = c(-0.1, 0.25), lty = 'solid',
main = paste0('spca: para = [', rho_spca[1],', ', rho_spca[1],', ', rho_spca[1],']'), type = "h",
col = alpha(c('orangered', 'blue', 'green'), 0.5))
grid()
text(x = 190, y = 0.22, labels = 'Recovery:')
text(x = 300, y = 0.22, labels = 'Angle')
text(x = 300, y = 0.15, labels = round(angleRec_spca[1, 1], 4))
text(x = 300, y = 0.10, labels = round(angleRec_spca[1, 2], 4))
text(x = 300, y = 0.05, labels = round(angleRec_spca[1, 3], 4))
text(x = 400, y = 0.22, labels = 'Pattern')
text(x = 400, y = 0.15, labels = round(patternRec_spca[1, 1], 4))
text(x = 400, y = 0.10, labels = round(patternRec_spca[1, 2], 4))
text(x = 400, y = 0.05, labels = round(patternRec_spca[1, 3], 4))
lines(V[, 1]*sign(V[1, 1]), col = "red")
lines(V[, 2]*sign(V[sp_card+1, 2]), col = "red")
lines(V[, 3]*sign(V[2*sp_card+1, 3]), col = "red")
matplot(seq(1, m), results_spca[2, ,] , xlab = "", ylab = "", ylim = c(-0.1, 0.25), lty = 'solid',
main = paste0('spca: para = [', rho_spca[2],', ', rho_spca[2],', ', rho_spca[2],']'), type = "h",
col = alpha(c('orangered', 'blue', 'green'), 0.5))
grid()
text(x = 190, y = 0.22, labels = 'Recovery:')
text(x = 300, y = 0.22, labels = 'Angle')
text(x = 300, y = 0.15, labels = round(angleRec_spca[2, 1], 4))
text(x = 300, y = 0.10, labels = round(angleRec_spca[2, 2], 4))
text(x = 300, y = 0.05, labels = round(angleRec_spca[2, 3], 4))
text(x = 400, y = 0.22, labels = 'Pattern')
text(x = 400, y = 0.15, labels = round(patternRec_spca[2, 1], 4))
text(x = 400, y = 0.10, labels = round(patternRec_spca[2, 2], 4))
text(x = 400, y = 0.05, labels = round(patternRec_spca[2, 3], 4))
lines(V[, 1]*sign(V[1, 1]), col = "red")
lines(V[, 2]*sign(V[sp_card+1, 2]), col = "red")
lines(V[, 3]*sign(V[2*sp_card+1, 3]), col = "red")
matplot(seq(1, m), results_spca[3, ,] , xlab = "Index", ylab = "", ylim = c(-0.1, 0.25), lty = 'solid',
main = paste0('spca: para = [', rho_spca[3],', ', rho_spca[3],', ', rho_spca[3],']'), type = "h",
col = alpha(c('orangered', 'blue', 'green'), 0.5))
grid()
text(x = 190, y = 0.22, labels = 'Recovery:')
text(x = 300, y = 0.22, labels = 'Angle')
text(x = 300, y = 0.15, labels = round(angleRec_spca[3, 1], 4))
text(x = 300, y = 0.10, labels = round(angleRec_spca[3, 2], 4))
text(x = 300, y = 0.05, labels = round(angleRec_spca[3, 3], 4))
text(x = 400, y = 0.22, labels = 'Pattern')
text(x = 400, y = 0.15, labels = round(patternRec_spca[3, 1], 4))
text(x = 400, y = 0.10, labels = round(patternRec_spca[3, 2], 4))
text(x = 400, y = 0.05, labels = round(patternRec_spca[3, 3], 4))
lines(V[, 1]*sign(V[1, 1]), col = "red")
lines(V[, 2]*sign(V[sp_card+1, 2]), col = "red")
lines(V[, 3]*sign(V[2*sp_card+1, 3]), col = "red")
matplot(seq(1, m), results_spca[1, ,] , xlab = "", ylab = "", ylim = c(-0.1, 0.25), lty = 'solid',
main = paste0('SPcaGrid: lambda = ', lam[1]), type = "h",
col = alpha(c('orangered', 'blue', 'green'), 0.5))
grid()
text(x = 190, y = 0.22, labels = 'Recovery:')
text(x = 300, y = 0.22, labels = 'Angle')
text(x = 300, y = 0.15, labels = round(angleRec_spcagrid[1, 1], 4))
text(x = 300, y = 0.10, labels = round(angleRec_spcagrid[1, 2], 4))
text(x = 300, y = 0.05, labels = round(angleRec_spcagrid[1, 3], 4))
text(x = 400, y = 0.22, labels = 'Pattern')
text(x = 400, y = 0.15, labels = round(patternRec_spcagrid[1, 1], 4))
text(x = 400, y = 0.10, labels = round(patternRec_spcagrid[1, 2], 4))
text(x = 400, y = 0.05, labels = round(patternRec_spcagrid[1, 3], 4))
lines(V[, 1]*sign(V[1, 1]), col = "red")
lines(V[, 2]*sign(V[sp_card+1, 2]), col = "red")
lines(V[, 3]*sign(V[2*sp_card+1, 3]), col = "red")
matplot(seq(1, m), results_spcagrid[2, ,] , xlab = "", ylab = "", ylim = c(-0.1, 0.25), lty = 'solid',
main = paste0('SPcaGrid: lambda = ', lam[2]), type = "h",
col = alpha(c('orangered', 'blue', 'green'), 0.5))
grid()
text(x = 190, y = 0.22, labels = 'Recovery:')
text(x = 300, y = 0.22, labels = 'Angle')
text(x = 300, y = 0.15, labels = round(angleRec_spcagrid[2, 1], 4))
text(x = 300, y = 0.10, labels = round(angleRec_spcagrid[2, 2], 4))
text(x = 300, y = 0.05, labels = round(angleRec_spcagrid[2, 3], 4))
text(x = 400, y = 0.22, labels = 'Pattern')
text(x = 400, y = 0.15, labels = round(patternRec_spcagrid[2, 1], 4))
text(x = 400, y = 0.10, labels = round(patternRec_spcagrid[2, 2], 4))
text(x = 400, y = 0.05, labels = round(patternRec_spcagrid[2, 3], 4))
lines(V[, 1]*sign(V[1, 1]), col = "red")
lines(V[, 2]*sign(V[sp_card+1, 2]), col = "red")
lines(V[, 3]*sign(V[2*sp_card+1, 3]), col = "red")
matplot(seq(1, m), results_spcagrid[3, ,] , xlab = "Index", ylab = "", ylim = c(-0.1, 0.25), lty = 'solid',
main = paste0('SPcaGrid: lambda = ', lam[3]), type = "h",
col = alpha(c('orangered', 'blue', 'green'), 0.5))
grid()
text(x = 190, y = 0.22, labels = 'Recovery:')
text(x = 300, y = 0.22, labels = 'Angle')
text(x = 300, y = 0.15, labels = round(angleRec_spcagrid[3, 1], 4))
text(x = 300, y = 0.10, labels = round(angleRec_spcagrid[3, 2], 4))
text(x = 300, y = 0.05, labels = round(angleRec_spcagrid[3, 3], 4))
text(x = 400, y = 0.22, labels = 'Pattern')
text(x = 400, y = 0.15, labels = round(patternRec_spcagrid[3, 1], 4))
text(x = 400, y = 0.10, labels = round(patternRec_spcagrid[3, 2], 4))
text(x = 400, y = 0.05, labels = round(patternRec_spcagrid[3, 3], 4))
lines(V[, 1]*sign(V[1, 1]), col = "red")
lines(V[, 2]*sign(V[sp_card+1, 2]), col = "red")
lines(V[, 3]*sign(V[2*sp_card+1, 3]), col = "red")
dev.off()
load("C:/Users/kbenidis/Dropbox/Documents/HKUST/R Packages/sparseEigen/R_buildignore/running_time_data.RData")
########## Plots ##########
# load("running_time.RData")
# png(file="running_time2.png", width = 18, height = 13, units = "cm", res = 600) # 4251 x 3070 pixels
#setEPS(); postscript("running_time2.eps", width=18*0.393701, height=13*0.393701)
pdf('recovery.pdf', width = 18*0.393701, height = 13*0.393701)
matplot(dims, results, pch=1, col = 1:3, type = 'b',
xlab = "Dimension", ylab = "Time", log = 'y', yaxt = 'n')
axis(2, at = 10^(c(-1, 0, 1, 2)))
legend("topleft", legend = c('spca()', 'SPcaGrid()', 'spEigen()'), col=1:3, pch=1)
grid()
par(new = TRUE)
matplot(dims, results, pch=1, col = 1:3, type = 'b',
xlab = "Dimension", ylab = "Time", log = 'y', yaxt = 'n')
axis(2, at = 10^(c(-1, 0, 1, 2)))
legend("topleft", legend = c('spca()', 'SPcaGrid()', 'spEigen()'), col=1:3, pch=1)
dev.off()
# save.image(file = 'runnong_time_v2.RData')
########## Plots ##########
# load("running_time.RData")
# png(file="running_time2.png", width = 18, height = 13, units = "cm", res = 600) # 4251 x 3070 pixels
#setEPS(); postscript("running_time2.eps", width=18*0.393701, height=13*0.393701)
pdf('running_time.pdf', width = 18*0.393701, height = 13*0.393701)
matplot(dims, results, pch=1, col = 1:3, type = 'b',
xlab = "Dimension", ylab = "Time", log = 'y', yaxt = 'n')
axis(2, at = 10^(c(-1, 0, 1, 2)))
legend("topleft", legend = c('spca()', 'SPcaGrid()', 'spEigen()'), col=1:3, pch=1)
grid()
par(new = TRUE)
matplot(dims, results, pch=1, col = 1:3, type = 'b',
xlab = "Dimension", ylab = "Time", log = 'y', yaxt = 'n')
axis(2, at = 10^(c(-1, 0, 1, 2)))
legend("topleft", legend = c('spca()', 'SPcaGrid()', 'spEigen()'), col=1:3, pch=1)
dev.off()
# save.image(file = 'runnong_time_v2.RData')
source('C:/Users/kbenidis/Dropbox/Documents/HKUST/R Packages/sparseEigen/R_buildignore/package_comp_param.R')
rmarkdown::render("vignettes/SparseEigenvectors.Rmd", "all")  # this also generates the pdf
tools::compactPDF("vignettes/SparseEigenvectors.pdf", gs_quality = "printer")  # this compresses the pdf
install.packages('tools')
install.packages("tools")
install.packages("tools")
install.packages("tools")
install.packages("tools")
install.packages("tools")
install.packages("tools")
tools::compactPDF("vignettes/SparseEigenvectors.pdf", gs_quality = "printer")  # this compresses the pdf
tools::compactPDF("vignettes/SparseEigenvectors.pdf", gs_quality = "ebook")  # this compresses the pdf
?compactPDF
tools::compactPDF("vignettes/", gs_quality = "ebook")  # this compresses the pdf
tools::compactPDF("vignettes/SparseEigenvectors.pdf", gs_quality = "ebook")  # this compresses the pdf
tools::compactPDF("vignettes/SparseEigenvectors.pdf", gs_quality = "printer")  # this compresses the pdf
tools::compactPDF("vignettes/SparseEigenvectors.pdf", gs_quality = "printer")  # this compresses the pdf
setwd("C:/Users/kbenidis/Dropbox/Documents/HKUST/R Packages/sparseEigen")
tools::compactPDF("vignettes/SparseEigenvectors.pdf", gs_quality = "printer")  # this compresses the pdf
tools::compactPDF("vignettes/SparseEigenvectors.pdf")  # this compresses the pdf
rmarkdown::render("vignettes/SparseEigenvectors.Rmd", "all")  # this also generates the pdf
rmarkdown::render("vignettes/SparseEigenvectors.Rmd", "all")  # this also generates the pdf
rmarkdown::render("vignettes/SparseEigenvectors.Rmd", "all")  # this also generates the pdf
rmarkdown::render("vignettes/SparseEigenvectors.Rmd", "all")  # this also generates the pdf
rmarkdown::render("vignettes/SparseEigenvectors.Rmd", "all")  # this also generates the pdf
# Vignettes
#devtools::use_vignette("sparse_eigenvectors")  # to create the folder the first time
#rmarkdown::render("vignettes/SparseEigenvectors.Rmd", "md_document")  # this is to generate the .md for GitHub
rmarkdown::render("vignettes/SparseEigenvectors.Rmd", "pdf_document")
tools::compactPDF("vignettes/SparseEigenvectors.pdf", gs_quality = "printer")  # this compresses the pdf
setwd("C:/Users/kbenidis/Dropbox/Documents/HKUST/R Packages/sparseEigen")
tools::compactPDF("vignettes/SparseEigenvectors.pdf", gs_quality = "printer")  # this compresses the pdf
tools::compactPDF("C:/Users/kbenidis/Dropbox/Documents/HKUST/R Packages/sparseEigenvignettes/SparseEigenvectors.pdf", gs_quality = "printer")  # this compresses the pdf
tools::compactPDF("C:/Users/kbenidis/Dropbox/Documents/HKUST/R Packages/sparseEigen/vignettes/SparseEigenvectors.pdf", gs_quality = "printer")  # this compresses the pdf
compactPDF("C:/Users/kbenidis/Dropbox/Documents/HKUST/R Packages/sparseEigen/vignettes/SparseEigenvectors.pdf", gs_quality = "printer")  # this compresses the pdf
library(tools)
compactPDF("C:/Users/kbenidis/Dropbox/Documents/HKUST/R Packages/sparseEigen/vignettes/SparseEigenvectors.pdf", gs_quality = "printer")  # this compresses the pdf
compactPDF("vignettes/SparseEigenvectors.pdf", gs_quality = "printer")  # this compresses the pdf
compactPDF("/vignettes/SparseEigenvectors.pdf", gs_quality = "printer")  # this compresses the pdf
library(sparseEigen)
tools::compactPDF("vignettes/SparseEigenvectors.pdf", gs_quality = "printer")  # this compresses the pdf
setwd("C:/Users/kbenidis/Dropbox/Documents/HKUST/R Packages/sparseEigen")
tools::compactPDF("vignettes/SparseEigenvectors.pdf", gs_quality = "printer")  # this compresses the pdf
tools::compactPDF("vignettes/", gs_quality = "printer")  # this compresses the pdf
?compactPDF
a <- tools::compactPDF("vignettes/", gs_quality = "printer")  # this compresses the pdf
?compressPDF
??compressPDF
library(utils)
?compressPDF
tools::compactPDF("vignettes/SparseEigenvectors.pdf", gs_quality = "printer")  # this compresses the pdf
tools::compactPDF("vignettes/SparseEigenvectors.pdf", gs_quality = "printer")  # this compresses the pdf
tools::compactPDF("vignettes/SparseEigenvectors.pdf", gs_quality = "printer")  # this compresses the pdf
